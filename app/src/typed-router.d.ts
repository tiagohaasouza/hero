/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/AdminHomePage': RouteRecordInfo<'/AdminHomePage', '/AdminHomePage', Record<never, never>, Record<never, never>>,
    '/ApexChartsPage': RouteRecordInfo<'/ApexChartsPage', '/ApexChartsPage', Record<never, never>, Record<never, never>>,
    '/Assets/NotFoundMoon': RouteRecordInfo<'/Assets/NotFoundMoon', '/Assets/NotFoundMoon', Record<never, never>, Record<never, never>>,
    '/Assets/NotFoundNeon': RouteRecordInfo<'/Assets/NotFoundNeon', '/Assets/NotFoundNeon', Record<never, never>, Record<never, never>>,
    '/BooksPage': RouteRecordInfo<'/BooksPage', '/BooksPage', Record<never, never>, Record<never, never>>,
    '/ChartJSPage': RouteRecordInfo<'/ChartJSPage', '/ChartJSPage', Record<never, never>, Record<never, never>>,
    '/ChatGPTPage': RouteRecordInfo<'/ChatGPTPage', '/ChatGPTPage', Record<never, never>, Record<never, never>>,
    '/ConfirmCodePage': RouteRecordInfo<'/ConfirmCodePage', '/ConfirmCodePage', Record<never, never>, Record<never, never>>,
    '/ForgotPasswordPage': RouteRecordInfo<'/ForgotPasswordPage', '/ForgotPasswordPage', Record<never, never>, Record<never, never>>,
    '/HomePage': RouteRecordInfo<'/HomePage', '/HomePage', Record<never, never>, Record<never, never>>,
    '/LockScreenPage': RouteRecordInfo<'/LockScreenPage', '/LockScreenPage', Record<never, never>, Record<never, never>>,
    '/LoginPage': RouteRecordInfo<'/LoginPage', '/LoginPage', Record<never, never>, Record<never, never>>,
    '/NotFoundPage': RouteRecordInfo<'/NotFoundPage', '/NotFoundPage', Record<never, never>, Record<never, never>>,
    '/RegistrationPage': RouteRecordInfo<'/RegistrationPage', '/RegistrationPage', Record<never, never>, Record<never, never>>,
    '/ResetPasswordPage': RouteRecordInfo<'/ResetPasswordPage', '/ResetPasswordPage', Record<never, never>, Record<never, never>>,
    '/Super/Assets/LibrariesDetails': RouteRecordInfo<'/Super/Assets/LibrariesDetails', '/Super/Assets/LibrariesDetails', Record<never, never>, Record<never, never>>,
    '/Super/BackendLibrariesPage': RouteRecordInfo<'/Super/BackendLibrariesPage', '/Super/BackendLibrariesPage', Record<never, never>, Record<never, never>>,
    '/VerifyAccountPage': RouteRecordInfo<'/VerifyAccountPage', '/VerifyAccountPage', Record<never, never>, Record<never, never>>,
    '/VerifyAuthenticatorPage': RouteRecordInfo<'/VerifyAuthenticatorPage', '/VerifyAuthenticatorPage', Record<never, never>, Record<never, never>>,
    '/VerifyEmailPage': RouteRecordInfo<'/VerifyEmailPage', '/VerifyEmailPage', Record<never, never>, Record<never, never>>,
    '/VerifySMSPage': RouteRecordInfo<'/VerifySMSPage', '/VerifySMSPage', Record<never, never>, Record<never, never>>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/AdminHomePage.vue': {
      routes: '/AdminHomePage'
      views: never
    }
    'src/pages/ApexChartsPage.vue': {
      routes: '/ApexChartsPage'
      views: never
    }
    'src/pages/Assets/NotFoundMoon.vue': {
      routes: '/Assets/NotFoundMoon'
      views: never
    }
    'src/pages/Assets/NotFoundNeon.vue': {
      routes: '/Assets/NotFoundNeon'
      views: never
    }
    'src/pages/BooksPage.vue': {
      routes: '/BooksPage'
      views: never
    }
    'src/pages/ChartJSPage.vue': {
      routes: '/ChartJSPage'
      views: never
    }
    'src/pages/ChatGPTPage.vue': {
      routes: '/ChatGPTPage'
      views: never
    }
    'src/pages/ConfirmCodePage.vue': {
      routes: '/ConfirmCodePage'
      views: never
    }
    'src/pages/ForgotPasswordPage.vue': {
      routes: '/ForgotPasswordPage'
      views: never
    }
    'src/pages/HomePage.vue': {
      routes: '/HomePage'
      views: never
    }
    'src/pages/LockScreenPage.vue': {
      routes: '/LockScreenPage'
      views: never
    }
    'src/pages/LoginPage.vue': {
      routes: '/LoginPage'
      views: never
    }
    'src/pages/NotFoundPage.vue': {
      routes: '/NotFoundPage'
      views: never
    }
    'src/pages/RegistrationPage.vue': {
      routes: '/RegistrationPage'
      views: never
    }
    'src/pages/ResetPasswordPage.vue': {
      routes: '/ResetPasswordPage'
      views: never
    }
    'src/pages/Super/Assets/LibrariesDetails.vue': {
      routes: '/Super/Assets/LibrariesDetails'
      views: never
    }
    'src/pages/Super/BackendLibrariesPage.vue': {
      routes: '/Super/BackendLibrariesPage'
      views: never
    }
    'src/pages/VerifyAccountPage.vue': {
      routes: '/VerifyAccountPage'
      views: never
    }
    'src/pages/VerifyAuthenticatorPage.vue': {
      routes: '/VerifyAuthenticatorPage'
      views: never
    }
    'src/pages/VerifyEmailPage.vue': {
      routes: '/VerifyEmailPage'
      views: never
    }
    'src/pages/VerifySMSPage.vue': {
      routes: '/VerifySMSPage'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
